/* ! Se utilizará este tipo de comentario para mostrar IMPORTANTE, PROBLEMAS, REVISION */
/* TODO - se utilizará este tipo de comentario para mostrar instrucciones/requerimientos (to do list) */
/* ? Con este marcaremos dudas especificas */
/* comentario normal (notas-información) */

/* standard settings */
* {
  margin: 0;
  padding: 0;
}

/* COLOR CODE: 
#fecc01 YELLOW MUSTARD
#232323 TEXT
#f1f1f1 BACKGROUNDS - GALLERY SLIDES - SECTION
#e2e2e2 CARDS BACKGROUND
#fecc01 BTN 
#ffffff WHITE*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Playfair Display", serif;
  font-weight: bold;
  font-size: 30px;
}

p,
a,
form,
li {
  font-family: "Lato", sans-serif;
  font-size: 17px;
}

body {
  background-color: rgb(38, 37, 37);
}

.hero {
  height: 100vh;
  display: flex;
  /* En este caso lo uso flex para poder tener los hijos uno al lado del otro (la foto y la info). Los necesitamos asi para este diseño. */
  margin: 30px;
}

.photo-1 img {
  height: 100vh;
  border-top-left-radius: 250px;
  /* Si la img fuese mas ancha, quizas habria que darle un width:auto. En este caso la imagen tiene un ancho mas angosto, por eso al darle el height 200vh se ve bien, sin necesidad de darle un valor a esa propiedad. */
}

.hero-info {
  background-color: rgb(255, 255, 255);
  border-top-right-radius: 30px;
  height: 100vh;
  overflow: hidden;
  /* Esta propiedad con valor "hidden", hace que, en este caso, el borde superior se aplique bien. Si un elemento se sobresale o desborda, esta propiedad lo recorta, lo deja de hacer visible. En este caso, logramos que el fondo amarillo de "hero-info-1" deja de sobresalir arriba y hace visible el borde aplicado al contenedor, no lo sobresale más. Pasó lo mismo con el caso del hero-info-2, se le sumo el padding top y quedo mas grande que los 100vh de la section HERO, entonces me lo recorto*/
}

.hero-info-1 {
  /* 
  padding-left: 30px;
  padding-top: 60px;
  padding-bottom: 200px; */
  height: 50vh;
  background-color: #fecc01;
  display: flex;
  flex-direction: column;
  justify-content: center;
  /* align-items: flex-start; */
  /* Con estos cambios, hago que el contenido de este div se pueda organizar facilmente. Usamos FLEX para poder moverlo, cambiar su comportamiento y acomodarlo. Con height le dimos una altura directamente de la mitad de pantalla, porque sabemos que el hero tiene 100vh y queremos que los dos div (hero-info-1 y hero-info-2)ocupen el espacio de hero-info.  */
  padding-left: 30px;
  box-shadow: -19px -25px 30px 6px rgba(38, 37, 37, 1) inset;
  /* TIP: rgba comparado con rgb, lo que hace es agregar un valor extra "alpha -esa a del final, la cual controla la transparencia (opacidad) del color-"  */
}

.hero-info-1 h1 {
  font-size: 45px;
}

.hero-info-1 p {
  font-size: 25px;
  color: rgb(43, 42, 42);
}

.hero-info-2 {
  /* background-color: #e5e3e3; */
  height: 100vh;
  background-color: rgb(38, 37, 37);
  color: white;
  padding-left: 30px;
}

.countries {
  font-weight: bold;
  font-size: 20px;
  /* Para comenzar a la misma altura que el texto en el hero-info-1 */
  padding-top: 20px;
  padding-bottom: 15px;
}

/* .hero-info-2.hijo {
  font-size: 1000px;
} */
/* ESTO SOLO FUNCIONARIA si yo tengo una etqiueta en html con esas dos clases al mismo tiempo dentro de la misma. (class 1: .hero-info class 2: .hijo) */


.cta {
  padding: 10px 97px;
  /* el orden de valor de padding es: primer valor: arriba y abajo - segundo valor: 2 costados. Si escribiesemos 4 valores distintos, entonces se aplican en sentido horario, desde arriba hacia la derecha.Si uso un solo valor de padding, se aplicará el mismo a los 4 lados.-*/
  margin-top: 20px;
  font-size: 20px;
  cursor: pointer;
  background-color: #fecc01;
  border: none;
  border-radius: 10px;
}

.last-p-hero {
  font-weight: bold;
  font-size: 25px;
}

/* object-fit: contain; */
/* Esta propiedad ajusta una img dentro de su contenedor. El valor contain hace que la img escale hasta tener el mismo tamańo de su contenedor, que en esta seccion es 100% */