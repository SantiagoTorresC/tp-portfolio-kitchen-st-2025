.hero {
  height: 100vh;
  display: flex;
  /* En este caso lo uso flex para poder tener los hijos uno al lado del otro (la foto y la info). Los necesitamos asi para este diseño. */
  margin: 30px;
}

.photo-1 img {
  height: 100vh;
  border-top-left-radius: 250px;
  /* Si la img fuese mas ancha, quizas habria que darle un width:auto. En este caso la imagen tiene un ancho mas angosto, por eso al darle el height 200vh se ve bien, sin necesidad de darle un valor a esa propiedad. */
  box-shadow: -13px -12px 36px 4px rgba(252, 248, 170, 0.39);
}

.hero-info {
  background-color: rgb(255, 255, 255);
  border-top-right-radius: 30px;
  height: 100vh;
  overflow: hidden;
  /* Esta propiedad con valor "hidden", hace que, en este caso, el borde superior se aplique bien. Si un elemento se sobresale o desborda, esta propiedad lo recorta, lo deja de hacer visible. En este caso, logramos que el fondo amarillo de "hero-info-1" deja de sobresalir arriba y hace visible el borde aplicado al contenedor, no lo sobresale más. Pasó lo mismo con el caso del hero-info-2, se le sumo el padding top y quedo mas grande que los 100vh de la section HERO, entonces me lo recorto*/
}

.hero-info-1 {
  /* 
  padding-left: 30px;
  padding-top: 60px;
  padding-bottom: 200px; */
  height: 50vh;
  background-color: #fecc01;
  display: flex;
  flex-direction: column;
  justify-content: center;
  /* align-items: flex-start; */
  /* Con estos cambios, hago que el contenido de este div se pueda organizar facilmente. Usamos FLEX para poder moverlo, cambiar su comportamiento y acomodarlo. Con height le dimos una altura directamente de la mitad de pantalla, porque sabemos que el hero tiene 100vh y queremos que los dos div (hero-info-1 y hero-info-2)ocupen el espacio de hero-info.  */
  padding-left: 30px;
  box-shadow: -19px -25px 30px 6px rgba(38, 37, 37, 1) inset;
  /* TIP: rgba comparado con rgb, lo que hace es agregar un valor extra "alpha -esa a del final, la cual controla la transparencia (opacidad) del color-"  */
}

.hero-info-1 h1 {
  font-size: 45px;
}

.hero-info-1 p {
  font-size: 25px;
  color: rgb(43, 42, 42);
}

.hero-info-2 {
  /* background-color: #e5e3e3; */
  height: 100vh;
  background-color: rgb(38, 37, 37);
  color: white;
  padding-left: 30px;
}

.hero-info-2 p {
  margin-right: 170px;
  /* PRIMERO: Con esta seleccion lo que hice fue modificar exclusivamente la etiqueta p que se encuentra en el div contenedor de hero-info-2. Con este marging lo que cambie es el comportamiento por defecto de la etiqueta p, que es ocupar todo el espacio a lo ancho en formato de bloque. Les dije que de su lado derecho, quiero que se acorten y tengan un margen externo de 190px para con respecto el borde del div. Asi logre que el texto quede mas estetico y compacto a mi gusto.*/
  font-size: 18px;
}

.countries {
  font-weight: bold;
  font-size: 20px;
  /* Para comenzar a la misma altura que el texto en el hero-info-1 */
  padding-top: 20px;
  padding-bottom: 15px;
}

/* .hero-info-2.hijo {
  font-size: 1000px;
} */
/* ESTO SOLO FUNCIONARIA si yo tengo una etqiueta en html con esas dos clases al mismo tiempo dentro de la misma. (class 1: .hero-info class 2: .hijo) */

.last-p-hero p {
  font-weight: bold;
  font-size: 20px;
  margin-top: 7px;
  /* ? PREGUNTAR: por que a veces para aplicar correctamente el estilo dentro de una clase, es necesario llamar a la etiqueta dentro de la clase?*/
}